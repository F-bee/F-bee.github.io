<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>面向对象</title>
    <link href="/2022/08/07/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/08/07/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1. 面向对象"></a>1. 面向对象</h2><ul><li>面向过程：自上向下，将一个大问题分解为几个小问题，再将小问题分解为更小的问题，最后将任务划分成一个一个具体的步骤，分别去执行，最小粒度细化到方法层面</li><li>面向对象：将程序所有参与角色都看作一个个对象，通过对象和对象之间的相互调用来完成系统的功能，是一种将程序模块化的思想</li></ul><h3 id="1-1-类和对象"><a href="#1-1-类和对象" class="headerlink" title="1.1 类和对象"></a>1.1 类和对象</h3><p>对象是主体，类是用来创建对象的；类是产生对象的模板，所有的对象都是通过类来创建的</p><p>对象的特征：</p><ul><li>属性，对象的静态特征</li><li>方法，对象的动态特征</li></ul><p>类是对象的抽象化描述，对象是类的具体实例</p><p>对象的创建：new、调用类的构造方法：</p><ul><li>类默认有一个无参构造，手动创建一个有参构造后，该默认构造就会被覆盖</li><li>使用有参构造创建对象，只需调用一次方法，就可以同时完成创建和赋值；使用无参需要创建、赋值两步操作</li></ul><h3 id="1-2-成员变量和局部变量"><a href="#1-2-成员变量和局部变量" class="headerlink" title="1.2 成员变量和局部变量"></a>1.2 成员变量和局部变量</h3><p>作用域：就近原则；成员变量和局部变量重名时，采用就近原则进行优先级取值；</p><p>成员变量有默认值，局部变量没有：</p><ul><li><p>byte、short、int、long、float、double：0</p></li><li><p>char：’’</p></li><li><p>boolean：false</p></li><li><p>引用类型：null</p></li></ul><h3 id="1-3-三大特征"><a href="#1-3-三大特征" class="headerlink" title="1.3 三大特征"></a>1.3 三大特征</h3><p>封装、继承、多态</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>将类的各种信息（属性/成员变量和方法）封装到内部，使得外部无法直接访问，提高数据安全性。</p><ul><li><p>属性私有化</p></li><li><p>提供公有方法访问私有属性（set/get），在方法中添加逻辑，控制数据的安全性</p></li><li><p>外部通过 set/get 方法访问属性</p></li></ul><p><strong>static</strong></p><p>static 表示静态或全局，可用来修饰成员变量、成员方法、代码块，被修饰的资源属于整个类，所有对象都可以共享这些资源；</p><p>使用 static 修饰后，方法就会独立于该类的任何一个实例对象，不属于任何对象，而是属于类，访问时不需要依赖于任何一个对象，可以直接通过类来访问。</p><p>static 修饰的方法（静态方法）不能使用 this 关键字；this 表示当前对象，静态资源属于类，不属于任何对象；同时静态方法也不能访问类的实例变量和实例方法（非 static 修饰的）</p><p>static 修饰代码块，静态代码块的特点是只执行一次，当类被加载到内存时执行，不需要手动调用，会自动执行；且也只能访问静态资源；创建对象时，静态代码块的执行先于构造函数的执行，即类加载 –&gt; 创建对象</p><p><strong>this</strong></p><p>永远指向构造或调用的当前实例；</p><p>可用于在构造器里访问另一个构造器，此时只能放在第一行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;bens&quot;</span>, <span class="hljs-string">&quot;black&quot;</span>); <span class="hljs-comment">// 但 this 作为构造器只能放在第一行</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String type, String color)</span> &#123;<br>    <span class="hljs-built_in">this</span>.type = type;<br>    <span class="hljs-built_in">this</span>.color = color;<br>&#125;<br></code></pre></td></tr></table></figure><p>this() 调用本类构造函数；注意构造函数不能进行递归，会导致无限创建对象，堆内存溢出</p><p><strong>super</strong></p><p>super() 调用父类构造函数</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>类之间资源共享的一种方式，一个类中的信息（成员变量、成员方法）可以直接被另外的类拥有。</p><p>子类能继承父类的非私有资源（非 private 修饰的资源）</p><ul><li>创建子类对象之前，会自动创建父类对象</li><li>无参创建子类对象，默认调用父类的无参构造创建父类对象</li><li>有参创建子类对象，也默认调用父类的无参构造创建父类对象</li></ul><p>父类也叫超类，子类也叫派生类；创建子类时通过有参构造创建父类对象（super）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    <br>    <span class="hljs-built_in">super</span>(); <span class="hljs-comment">// 可省略，默认调用父类无参构造</span><br>    System.out.println(<span class="hljs-string">&quot;无参构造创建Student对象&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-built_in">super</span>(<span class="hljs-number">1</span>);<br>    System.out.println(<span class="hljs-string">&quot;有参构造创建Student对象&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>一种事务可以有多种不同的表现形态，一个对象在不同的业务场景中以不同的形式出现，根据不同的业务场景，对象呈现出不同形式。</p><ul><li>必须有继承关系，只有构建继承关系，才能使一个对象可以进行不同形式形式的变形</li><li>父类引用指向子类实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.oop;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Member</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.oop;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrdinaryMember</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Member</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;普通会员买书打9折&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.oop;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperMember</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Member</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;超级会员买书打6折&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.oop;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VIPMember</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Member</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;VIP会员买书打3折&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">OrdinaryMember</span> <span class="hljs-variable">ordinaryMember</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrdinaryMember</span>();<br>    <span class="hljs-type">SuperMember</span> <span class="hljs-variable">superMember</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperMember</span>();<br>    <span class="hljs-type">VIPMember</span> <span class="hljs-variable">vipMember</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VIPMember</span>();<br><br>    <span class="hljs-type">Cashier</span> <span class="hljs-variable">cashier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cashier</span>();<br><br>    cashier.setMember(ordinaryMember);<br>    cashier.settlement();<br>    cashier.setMember(superMember);<br>    cashier.settlement();<br>    cashier.setMember(vipMember);<br>    cashier.settlement();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-方法重载和重写"><a href="#1-4-方法重载和重写" class="headerlink" title="1.4 方法重载和重写"></a>1.4 方法重载和重写</h3><ul><li>重载：在<strong>同一个类中</strong>，两个方法的<strong>方法名相同</strong>，<strong>参数列表不同（数据类型、形参个数）</strong>，<strong>与返回值无关</strong></li><li>重写：子类在继承父类方法的基础上，对父类方法进行重新定义，覆盖父类方法的操作叫做重写；规则：<ul><li>方法名相同</li><li>参数列表相同</li><li><strong>子类方法的返回值与父类方法的返回值类型相同或者是其子类</strong>（返回值：父类 &gt; 子类）</li><li><strong>子类方法的访问权限不能小于父类</strong>（访问权限：子类 &gt; 父类）但能被子类重写的方法一定是非 private 的</li></ul></li></ul><p><strong>权限修饰符</strong></p><table><thead><tr><th>修饰符</th><th>当前类</th><th>同 package</th><th>子孙类</th><th>其他 package</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>friendly</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h3 id="1-5-抽象类和抽象方法"><a href="#1-5-抽象类和抽象方法" class="headerlink" title="1.5 抽象类和抽象方法"></a>1.5 抽象类和抽象方法</h3><p>抽象方法：只把方法定义出来，但不做实现</p><p>抽象类：一个类中一旦出现一个抽象方法，则该类必须定义为抽象类；抽象类中那个可以没有抽象方法，也可以有普通方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Member</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-面向对象高级部分"><a href="#2-面向对象高级部分" class="headerlink" title="2. 面向对象高级部分"></a>2. 面向对象高级部分</h2><h3 id="2-1-Object-类"><a href="#2-1-Object-类" class="headerlink" title="2.1 Object 类"></a>2.1 Object 类</h3><p>Object 是所有 Java 类的共同父类</p><p>Java 所有对象有一些共性，如：hashCode() 获取地址，getClass() 获取类信息，……</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>toString()</td><td>以字符串的形式返回对象的信息</td></tr><tr><td>equals(Object obj)</td><td>判断两个对象是否相等</td></tr><tr><td>hashCode()</td><td>返回对象的内存地址</td></tr></tbody></table><h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><p>Object 类中的 equals 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span> == obj);<br>&#125;<br></code></pre></td></tr></table></figure><p>String 类对 equals 方法的重写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object anObject)</span> &#123;<br>    <span class="hljs-comment">// 判断是否为同一对象</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == anObject) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// 判断数据类型是否一致</span><br>    <span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">anotherString</span> <span class="hljs-operator">=</span> (String)anObject;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> value.length;<br>        <span class="hljs-comment">// 判断长度是否一致</span><br>        <span class="hljs-keyword">if</span> (n == anotherString.value.length) &#123;<br>            <span class="hljs-comment">// 判断每一位字符是否一致</span><br>            <span class="hljs-type">char</span> v1[] = value;<br>            <span class="hljs-type">char</span> v2[] = anotherString.value;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (v1[i] != v2[i])<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义类重写的 equals 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-comment">// 判断是否是同一对象</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// 判断对象对象是否为空、对象类型是否相同</span><br>    <span class="hljs-comment">// 判断是否为空，因为不能使用值为null的引用类型变量调用非静态方法</span><br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">People</span> <span class="hljs-variable">people</span> <span class="hljs-operator">=</span> (People) o;<br>    <span class="hljs-keyword">return</span> id == people.id &amp;&amp; Objects.equals(name, people.name);<br>&#125;<br></code></pre></td></tr></table></figure><p>注：<strong>基本数据类型的值直接在栈中存放，所以用 “==” 比较；引用数据类型在栈中存放的是对象在堆中的地址，不能用 “==” 比较，应用 <code>equals()</code> 比较值</strong></p><p>hashCode 和 equals 的关联：</p><p>都是用来判断两个对象是否相等；hashCode 的效率更高；</p><ul><li><p>hashCode 的值不相等，则两个对象一定不是同一个对象；</p></li><li><p>hashCode 的值相等，两个对象不一定是同一个对象，不能确实对象的关系；</p></li></ul><p>需要考虑效率的场景下，需要两者配合判断对象是否相等以提高效率，如：</p><p>集合框架底层实现，允许/不允许存储重复数据。</p><p>**重写 <code>equals()</code> 时必须重写 <code>hashCode()</code>**：</p><p>因为两个相等的对象的 <code>hashCode</code> 值必须是相等。也就是说如果 <code>equals</code> 方法判断两个对象是相等的，那这两个对象的 <code>hashCode</code> 值也要相等；</p><p>如果重写 <code>equals()</code> 时没有重写 <code>hashCode()</code> 方法的话就可能会导致 <code>equals</code> 方法判断是相等的两个对象，<code>hashCode</code> 值却不相等。、</p><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>可作为一个数组进行操作，传入任意数量对应类型形参。只能出现一个，且只能放在最后。</p><h3 id="2-2-包装类"><a href="#2-2-包装类" class="headerlink" title="2.2 包装类"></a>2.2 包装类</h3><p>包装类是 Java 提供的一组类，专门用来创建 8 种基本数据类型对应的对象：</p><p>Byte、Short、Integer、Long、Float、Double、Character、Boolean</p><img src="/2022/08/07/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%8C%85%E8%A3%85%E7%B1%BB.jpg" class="" title="图片引用方法一"> <h4 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h4><ul><li><p>装箱：将基本类型用它们对应的引用类型包装起来</p><p>构造方法、<code>valueOf()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i); <span class="hljs-comment">// 遵循类型自动转换规则（小-&gt;大）</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-string">&quot;3&quot;</span>); <span class="hljs-comment">// 除Character外，都有转字符串的构造方法</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> Integer.valueOf(i); <span class="hljs-comment">// 第二种装箱方法</span><br>...<br></code></pre></td></tr></table></figure></li><li><p>拆箱：将包装类型转换为基本数据类型</p><p><code>*Value()</code>、<code>parse*</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">num4</span> <span class="hljs-operator">=</span> num.intValue(); <span class="hljs-comment">// 拆箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num5</span> <span class="hljs-operator">=</span> Integer.parseInt(<span class="hljs-string">&quot;3&quot;</span>); <span class="hljs-comment">// 字符串还原为基本数据类型，Character没有</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3-接口"><a href="#2-3-接口" class="headerlink" title="2.3 接口"></a>2.3 接口</h3><p>面向接口编程：将程序的业务逻辑进行分离，以接口的形式去对接不同的业务模块，接口只串联不实现，真正的业务逻辑实现交给接口的实现类来完成。</p><p>好处：当用户需求发生变更时，只需要切换不同的实现类，而不需要修改串联模块的接口，减少对系统的影响；</p><p>使用这种方式编程，代码的耦合度低，灵活性高且易于扩展。</p><p>接口和抽象类的关系：</p><p>接口是一个极度抽象的抽象类，接口中的方法全部都是抽象方法；抽象类中可以有非抽象方法。</p><p>接口的实现类用来实现接口中的抽象方法，将抽象的概念具体化；实现类实现接口，需要对接口内部所有抽象方法进行实现，同时要求访问权限修饰符、返回类型、方法名和参数列表完全相同。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2022/08/07/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/08/07/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>单例模式：一个类只能有一个实例化对象，多个线程共享该实例对象的资源；要求：</p><ol><li><p>外部不能随意调用构造函数创建对象；</p><p>私有化构造器</p></li><li><p>内部对外提供一个可调用的 public 函数，通过该函数获取单例对象；</p><p>这个方法要定义为 static，因为构造函数为私有，外部不能通过创建实例对象来调用该方法，只能定义为静态，通过类调用</p></li></ol><p>最基本思想，单线程下实现单例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonDemo</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SingletonDemo</span> <span class="hljs-variable">singletonDemo</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonDemo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;创建了SingletonDemo对象&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonDemo <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (singletonDemo == <span class="hljs-literal">null</span>) &#123;<br>            singletonDemo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonDemo</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> singletonDemo;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>多线程下，对 public 方法加锁，使同一时间只有一个线程能访问该资源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> SingletonDemo <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (singletonDemo == <span class="hljs-literal">null</span>) &#123;<br>        singletonDemo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonDemo</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> singletonDemo;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以锁定其他共享资源，如代码块、类等；更推荐锁代码块，因为影响同步的代码可能不是整个方法，更细粒度的锁灵活性较高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonDemo <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (SingletonDemo.class) &#123;<br>        <span class="hljs-keyword">if</span> (singletonDemo == <span class="hljs-literal">null</span>) &#123;<br>            singletonDemo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonDemo</span>();<br>        &#125;   <br>    &#125;<br>    <span class="hljs-keyword">return</span> singletonDemo;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：应先锁，再判空；先判空，会有多个线程进入创建对象的代码块等待资源。</p><p>更加安全，使用 double check，双重校验锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonDemo <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (singletonDemo == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">synchronized</span> (SingletonDemo.class) &#123;<br>            <span class="hljs-keyword">if</span> (singletonDemo == <span class="hljs-literal">null</span>) &#123;<br>                singletonDemo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonDemo</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> singletonDemo;<br>&#125;<br></code></pre></td></tr></table></figure><p>绝对安全，定义对象时加上 volatile 关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonDemo</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SingletonDemo</span> <span class="hljs-variable">singletonDemo</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonDemo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;创建了SingletonDemo对象&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonDemo <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (singletonDemo == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (SingletonDemo.class) &#123;<br>                <span class="hljs-keyword">if</span> (singletonDemo == <span class="hljs-literal">null</span>) &#123;<br>                    singletonDemo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonDemo</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singletonDemo;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>volatile 的作用：使内存中的数据对线程可见</p><blockquote><p>一个线程在访问内存数据时，拿到的不是数据本身，而是将主内存中的东西复制保存在工作内存，相当于对内存中数据的副本进行操作，操作完成后再将数据保存到主内存；即主内存对线程是不可见的</p></blockquote><img src="/2022/08/07/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/JMM.png" class="" title="图片引用方法一"> ]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>readme</title>
    <link href="/2022/08/07/readme/"/>
    <url>/2022/08/07/readme/</url>
    
    <content type="html"><![CDATA[<h2 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h2><p class="note note-primary">简要说明</p><p>博客于 <strong>2022.08.07</strong> 开始更新</p><p>博主为同年入职的应届本科生，岗位是 Java 后台开发，网络安全行业，同时负责安全平台运维</p><p>主要内容是<span class="label label-danger">个人学习笔记</span>，工作中<span class="label label-danger">工作中解决问题的方法</span>分享</p><p>文章内容会包括 Java 知识，linux 知识，shell 脚本，分布式架构常用技术以及中间件技术等</p><p>文章内容分<span class="label label-danger">个人文章</span>和<span class="label label-danger">分享文章</span>，分类、标签为<strong>个人</strong>等相关，可选择性观看；分享文章主要是知识干货，推荐观看</p><p>内容会尽量保持高质量，提供评论功能，欢迎大家积极批评指正。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>testArticle</title>
    <link href="/2022/08/07/testArticle/"/>
    <url>/2022/08/07/testArticle/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2022/08/07/testArticle/test.png" class="" title="图片引用方法一"> ]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/07/hello-world/"/>
    <url>/2022/08/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
