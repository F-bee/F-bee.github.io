<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AOP</title>
    <link href="/2022/09/04/AOP/"/>
    <url>/2022/09/04/AOP/</url>
    
    <content type="html"><![CDATA[<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP 即面向切面编程，常用的场景是实现业务代码和非业务代码的解耦合。</p><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><ul><li><p>创建一个计算器接口 Cal，定义4个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.utils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Cal</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.utils;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;add方法的参数是[&quot;</span>+num1+<span class="hljs-string">&quot;,&quot;</span>+num2+<span class="hljs-string">&quot;]&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> num1+num2;<br>        System.out.println(<span class="hljs-string">&quot;add方法的结果是&quot;</span>+result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;sub方法的参数是[&quot;</span>+num1+<span class="hljs-string">&quot;,&quot;</span>+num2+<span class="hljs-string">&quot;]&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> num1-num2;<br>        System.out.println(<span class="hljs-string">&quot;sub方法的结果是&quot;</span>+result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;mul方法的参数是[&quot;</span>+num1+<span class="hljs-string">&quot;,&quot;</span>+num2+<span class="hljs-string">&quot;]&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> num1*num2;<br>        System.out.println(<span class="hljs-string">&quot;mul方法的结果是&quot;</span>+result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;div方法的参数是[&quot;</span>+num1+<span class="hljs-string">&quot;,&quot;</span>+num2+<span class="hljs-string">&quot;]&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> num1/num2;<br>        System.out.println(<span class="hljs-string">&quot;div方法的结果是&quot;</span>+result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改代码中，日志信息和业务代码的耦合性很高，不利于系统的维护，使用 AOP 可以进行优化，将日志代码全部抽象出去统一进行处理，计算器方法中只保留核心的业务代码，做到核心业务和非业务代码的解耦合。</p></li><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>切面类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.entity;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//使其成为切面对象</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">//让IoC管理该对象</span><br><span class="hljs-meta">@EnableAspectJAutoProxy</span> <span class="hljs-comment">// 为目标类自动生成代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggerAspect</span> &#123;<br>    <span class="hljs-meta">@Before(&quot;execution(public int com.kk.utils.CalImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        <span class="hljs-comment">//获取方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        <span class="hljs-comment">//获取参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> Arrays.toString(joinPoint.getArgs());<br>        System.out.println(name + <span class="hljs-string">&quot;方法的参数是：&quot;</span> + args);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;execution(public int com.kk.utils.CalImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        <span class="hljs-comment">//获取方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(name+<span class="hljs-string">&quot;方法执行完毕&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(public int com.kk.utils.CalImpl.*(..))&quot;,returning = &quot;result&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">(JoinPoint joinPoint,Object result)</span>&#123;<br>        <span class="hljs-comment">//获取方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(name+<span class="hljs-string">&quot;方法的结果是&quot;</span>+result);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(public int com.kk.utils.CalImpl.*(..))&quot;,throwing = &quot;exception&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">(JoinPoint joinPoint,Exception exception)</span>&#123;<br>        <span class="hljs-comment">//获取方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(name+<span class="hljs-string">&quot;方法抛出异常&quot;</span>+exception);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>CalImpl 也要交给 IoC 容器来管理，添加 <code>@Component</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cal</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置文件中配置 AOP</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 注入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kk.utils.CalImpl&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;calImpl&quot;</span>/&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 自动扫描 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kk&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 使Aspect注解生效，为目标类自动生成代理对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 加载IoC</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring.xml&quot;</span>);<br>        <span class="hljs-type">Cal</span> <span class="hljs-variable">cal</span> <span class="hljs-operator">=</span> (Cal) applicationContext.getBean(<span class="hljs-string">&quot;calImpl&quot;</span>); <span class="hljs-comment">// 参数为配置类中的方法名</span><br>        cal.add(<span class="hljs-number">10</span>, <span class="hljs-number">3</span>);<br>        cal.sub(<span class="hljs-number">10</span>, <span class="hljs-number">3</span>);<br>        cal.mul(<span class="hljs-number">10</span>, <span class="hljs-number">3</span>);<br>        cal.div(<span class="hljs-number">10</span>, <span class="hljs-number">3</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>或者不使用配置文件，在切面类上添加注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">// 使其成为切面对象</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">// 让IoC管理该对象</span><br><span class="hljs-meta">@EnableAspectJAutoProxy</span> <span class="hljs-comment">// 为目标类自动生成代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggerAspect</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 加载IoC</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(<span class="hljs-string">&quot;com.kk&quot;</span>); <span class="hljs-comment">// 同时扫到CalImpl、LoggerAspect</span><br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态代理是 Spring AOP 的底层核心原理；首先需要清楚代理的意思：</p><p>代理：Java 常见的设计模式；两个主体：委托方、代理方；委托方原本要自己做的事情，现在交给代理方来代替委托方去完成。</p><p>Java 中实现代理机制，需要<strong>委托方和代理方都具备完成需求的能力</strong>，即委托方和代理方需要实现同一个接口。</p><p>静态代理：预先写好代理类的代码，如果要修改需要重新编译，灵活性较差：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.reflection.proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Phone</span> &#123;<br>    String <span class="hljs-title function_">sellPhone</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>委托类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Phone</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sellPhone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;销售iPhone&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HuaWei</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Phone</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sellPhone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;销售HuaWei手机&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PhoneProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">private</span> Phone phone;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PhoneProxy</span><span class="hljs-params">(Phone phone)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phone = phone;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sellPhone</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;开启代理模式&quot;</span>);<br>        <span class="hljs-keyword">return</span> phone.sellPhone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">PhoneProxy</span> <span class="hljs-variable">phoneProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PhoneProxy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Apple</span>());<br>        System.out.println(phoneProxy.sellPhone());<br>        phoneProxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PhoneProxy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HuaWei</span>());<br>        System.out.println(phoneProxy.sellPhone());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>动态代理：不需要预先写好代理类的代码，程序运行期间动态生成，灵活性很好；必须提前创建一个模板，由这个模板规定动态代理类的执行逻辑，并动态生成代理类</p><p>创建动态代理对象的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Proxy.newProxyInstance( , , )<br></code></pre></td></tr></table></figure><p>参数 1：类加载器 ClassLoader，将类（由参数 2 创建的类）加载到内存中</p><p>参数 2：Class&lt;?&gt;[]</p><p>参数 3：InvocationHandler 实例对象（完成创建类、并加载到内存的工作）</p><p>newProxyInstance 方法是创建代理对象的，创建委托对象的代理接口的，委托类和代理类实现同一个接口，所以只需要知道委托类实现了哪些接口（即参数 2），就可以动态创建代理类（对象）了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.reflection.proxy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>    <span class="hljs-comment">// 接收委托方</span><br>    <span class="hljs-keyword">private</span> Object object;<br><br>    <span class="hljs-comment">// 返回代理对象</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">bind</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-built_in">this</span>.object = object;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(MyInvocationHandler.class.getClassLoader(),<br>                object.getClass().getInterfaces(),<br>                <span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;开启代理模式（动态代理）&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> method.invoke(object, args);<br>        <span class="hljs-keyword">return</span> invoke;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.reflection.proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvocationTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyInvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInvocationHandler</span>();<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">proxy1</span> <span class="hljs-operator">=</span> (Phone) handler.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Apple</span>());<br>        System.out.println(proxy1.sellPhone());<br>        <span class="hljs-comment">// 无需手动创建代理类，灵活性增强</span><br><span class="hljs-comment">//        Car proxy2 = (Car) handler.bind(new BMW());</span><br><span class="hljs-comment">//        System.out.println(proxy2.sellCar());</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单自定义实现IoC</title>
    <link href="/2022/08/28/%E8%87%AA%E5%AE%9A%E4%B9%89IoC/"/>
    <url>/2022/08/28/%E8%87%AA%E5%AE%9A%E4%B9%89IoC/</url>
    
    <content type="html"><![CDATA[<h2 id="自定义-IoC"><a href="#自定义-IoC" class="headerlink" title="自定义 IoC"></a>自定义 IoC</h2><h3 id="基于配置类加载"><a href="#基于配置类加载" class="headerlink" title="基于配置类加载"></a>基于配置类加载</h3><p>基于反射机制实现</p><p>MyAnnotationConfigApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.ioc;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Annotation;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAnnotationConfigApplicationContext</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; ioc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyAnnotationConfigApplicationContext</span><span class="hljs-params">(Class clazz)</span> &#123;<br>        <span class="hljs-comment">// 判断目标类是否是一个配置类（看其是否有@Configuration注解）</span><br>        <span class="hljs-type">Annotation</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> clazz.getAnnotation(Configuration.class);<br>        <span class="hljs-keyword">if</span> (annotation == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(clazz.getName() + <span class="hljs-string">&quot;不是一个配置类&quot;</span>);<br>        &#125;<br><span class="hljs-comment">//        System.out.println(annotation);</span><br>        <span class="hljs-comment">//获取配置类中的方法</span><br>        Method[] declaredMethods = clazz.getDeclaredMethods();<br>        Bean annotation1;<br>        <span class="hljs-keyword">for</span> (Method declaredMethod : declaredMethods) &#123; <span class="hljs-comment">// 遍历需要注入的方法（标注了@bean的方法）</span><br>            annotation1 = declaredMethod.getAnnotation(Bean.class);<br>            <span class="hljs-keyword">if</span> (annotation1 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 获取目标方法返回值（调用方法）</span><br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> declaredMethod.invoke(clazz.getConstructor(<span class="hljs-literal">null</span>).newInstance(), <span class="hljs-literal">null</span>);<br>                    <span class="hljs-comment">// 把对象注入到IoC</span><br>                    String[] value = annotation1.value();<br>                    String key;<br>                    <span class="hljs-keyword">if</span>(value.length == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// @bean中没有指定value</span><br>                        <span class="hljs-comment">// 把目标方法的方法名作为key</span><br>                        key = declaredMethod.getName();<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// @bean注解中的value值作为key</span><br>                        key = value[<span class="hljs-number">0</span>];<br>                    &#125;<br>                    ioc.put(key, invoke);<br>                &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException | NoSuchMethodException | InstantiationException |<br>                         InvocationTargetException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ioc.get(name);<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;NoSuchBeanException&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基于注解加载"><a href="#基于注解加载" class="headerlink" title="基于注解加载"></a>基于注解加载</h3><ol><li>传入覆盖着目标类的目标包；</li><li>目标类要添加相应注解。</li></ol><p>MyAnnotationApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.ioc;<br><br><span class="hljs-keyword">import</span> com.kk.utils.MyTools;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAnnotationApplicationContext</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; ioc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyAnnotationApplicationContext</span><span class="hljs-params">(String packageName)</span> &#123;<br>        <span class="hljs-comment">// 找到包下所有的类（遍历硬盘）</span><br>        Set&lt;Class&lt;?&gt;&gt; classes = MyTools.getClasses(packageName);<br>        <span class="hljs-comment">// 遍历所有类，找到目标类（标注了@Component的类）</span><br>        Iterator&lt;Class&lt;?&gt;&gt; iterator = classes.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            Class&lt;?&gt; aClass = iterator.next();<br>            <span class="hljs-comment">//找到目标类</span><br>            <span class="hljs-type">Component</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> aClass.getAnnotation(Component.class);<br>            <span class="hljs-keyword">if</span>(annotation != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 创建目标类对象（调无参构造）</span><br>                    Constructor&lt;?&gt; constructor = aClass.getConstructor(<span class="hljs-literal">null</span>);<br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-literal">null</span>);<br>                    <span class="hljs-comment">// 获取当前类的所有属性</span><br>                    Field[] declaredFields = aClass.getDeclaredFields();<br>                    <span class="hljs-comment">// 遍历所有属性，为目标属性（标注了@Value的属性）赋值</span><br>                    <span class="hljs-keyword">for</span> (Field declaredField : declaredFields) &#123;<br>                        <span class="hljs-type">Value</span> <span class="hljs-variable">annotation1</span> <span class="hljs-operator">=</span> declaredField.getAnnotation(Value.class);<br>                        <span class="hljs-keyword">if</span>(annotation1 != <span class="hljs-literal">null</span>)&#123;<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> annotation1.value();<br>                            <span class="hljs-comment">// 赋值：拼接set方法名，数据类型转换，赋值</span><br>                            <span class="hljs-type">String</span> <span class="hljs-variable">fieldName</span> <span class="hljs-operator">=</span> declaredField.getName();<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;set&quot;</span> + fieldName.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).toUpperCase() + fieldName.substring(<span class="hljs-number">1</span>);<br>                            <span class="hljs-type">Method</span> <span class="hljs-variable">declaredMethod</span> <span class="hljs-operator">=</span> aClass.getDeclaredMethod(methodName, declaredField.getType());<br>                            <span class="hljs-keyword">if</span>(declaredField.getType().equals(Integer.class))&#123;<br>                                declaredMethod.invoke(o, Integer.parseInt(value));<br>                            &#125;<br>                            <span class="hljs-keyword">if</span>(declaredField.getType().equals(String.class))&#123;<br>                                declaredMethod.invoke(o,value);<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-comment">// 处理key</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> annotation.value();<br>                    String key;<br>                    <span class="hljs-keyword">if</span>(!value.equals(<span class="hljs-string">&quot;&quot;</span>))&#123;<br>                        key = value;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> aClass.getName();<br>                        className = className.replaceAll(packageName+<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>                        key = className.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).toLowerCase()+className.substring(<span class="hljs-number">1</span>);<br>                    &#125;<br>                    <span class="hljs-comment">//将对象注入到IoC</span><br>                    ioc.put(key, o);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ioc.get(key);<br>        <span class="hljs-keyword">if</span>(o == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;NoSuchBeanException&quot;</span>);<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>遍历硬盘的工具类比较复杂，可以直接拿来使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.utils;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileFilter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.JarURLConnection;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLDecoder;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.LinkedHashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.jar.JarEntry;<br><span class="hljs-keyword">import</span> java.util.jar.JarFile;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTools</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Set&lt;Class&lt;?&gt;&gt; getClasses(String pack) &#123;<br><br>        <span class="hljs-comment">// 第一个class类的集合</span><br>        Set&lt;Class&lt;?&gt;&gt; classes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;();<br>        <span class="hljs-comment">// 是否循环迭代</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">recursive</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">// 获取包的名字 并进行替换</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">packageName</span> <span class="hljs-operator">=</span> pack;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">packageDirName</span> <span class="hljs-operator">=</span> packageName.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br>        <span class="hljs-comment">// 定义一个枚举的集合 并进行循环来处理这个目录下的things</span><br>        Enumeration&lt;URL&gt; dirs;<br>        <span class="hljs-keyword">try</span> &#123;<br>            dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);<br>            <span class="hljs-comment">// 循环迭代下去</span><br>            <span class="hljs-keyword">while</span> (dirs.hasMoreElements()) &#123;<br>                <span class="hljs-comment">// 获取下一个元素</span><br>                <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> dirs.nextElement();<br>                <span class="hljs-comment">// 得到协议的名称</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> url.getProtocol();<br>                <span class="hljs-comment">// 如果是以文件的形式保存在服务器上</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;file&quot;</span>.equals(protocol)) &#123;<br>                    <span class="hljs-comment">// 获取包的物理路径</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> URLDecoder.decode(url.getFile(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                    <span class="hljs-comment">// 以文件的方式扫描整个包下的文件 并添加到集合中</span><br>                    findClassesInPackageByFile(packageName, filePath, recursive, classes);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;jar&quot;</span>.equals(protocol)) &#123;<br>                    <span class="hljs-comment">// 如果是jar包文件</span><br>                    <span class="hljs-comment">// 定义一个JarFile</span><br>                    System.out.println(<span class="hljs-string">&quot;jar类型的扫描&quot;</span>);<br>                    JarFile jar;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// 获取jar</span><br>                        jar = ((JarURLConnection) url.openConnection()).getJarFile();<br>                        <span class="hljs-comment">// 从此jar包 得到一个枚举类</span><br>                        Enumeration&lt;JarEntry&gt; entries = jar.entries();<br>                        findClassesInPackageByJar(packageName, entries, packageDirName, recursive, classes);<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                        <span class="hljs-comment">// log.error(&quot;在扫描用户定义视图时从jar包获取文件出错&quot;);</span><br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> classes;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findClassesInPackageByJar</span><span class="hljs-params">(String packageName, Enumeration&lt;JarEntry&gt; entries, String packageDirName, <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> recursive, Set&lt;Class&lt;?&gt;&gt; classes)</span> &#123;<br>        <span class="hljs-comment">// 同样的进行循环迭代</span><br>        <span class="hljs-keyword">while</span> (entries.hasMoreElements()) &#123;<br>            <span class="hljs-comment">// 获取jar里的一个实体 可以是目录 和一些jar包里的其他文件 如META-INF等文件</span><br>            <span class="hljs-type">JarEntry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> entries.nextElement();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> entry.getName();<br>            <span class="hljs-comment">// 如果是以/开头的</span><br>            <span class="hljs-keyword">if</span> (name.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>                <span class="hljs-comment">// 获取后面的字符串</span><br>                name = name.substring(<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-comment">// 如果前半部分和定义的包名相同</span><br>            <span class="hljs-keyword">if</span> (name.startsWith(packageDirName)) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> name.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>);<br>                <span class="hljs-comment">// 如果以&quot;/&quot;结尾 是一个包</span><br>                <span class="hljs-keyword">if</span> (idx != -<span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-comment">// 获取包名 把&quot;/&quot;替换成&quot;.&quot;</span><br>                    packageName = name.substring(<span class="hljs-number">0</span>, idx).replace(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>                &#125;<br>                <span class="hljs-comment">// 如果可以迭代下去 并且是一个包</span><br>                <span class="hljs-keyword">if</span> ((idx != -<span class="hljs-number">1</span>) || recursive) &#123;<br>                    <span class="hljs-comment">// 如果是一个.class文件 而且不是目录</span><br>                    <span class="hljs-keyword">if</span> (name.endsWith(<span class="hljs-string">&quot;.class&quot;</span>) &amp;&amp; !entry.isDirectory()) &#123;<br>                        <span class="hljs-comment">// 去掉后面的&quot;.class&quot; 获取真正的类名</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> name.substring(packageName.length() + <span class="hljs-number">1</span>, name.length() - <span class="hljs-number">6</span>);<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-comment">// 添加到classes</span><br>                            classes.add(Class.forName(packageName + <span class="hljs-string">&#x27;.&#x27;</span> + className));<br>                        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                            <span class="hljs-comment">// .error(&quot;添加用户自定义视图类错误 找不到此类的.class文件&quot;);</span><br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findClassesInPackageByFile</span><span class="hljs-params">(String packageName, String packagePath, <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> recursive, Set&lt;Class&lt;?&gt;&gt; classes)</span> &#123;<br>        <span class="hljs-comment">// 获取此包的目录 建立一个File</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(packagePath);<br>        <span class="hljs-comment">// 如果不存在或者 也不是目录就直接返回</span><br>        <span class="hljs-keyword">if</span> (!dir.exists() || !dir.isDirectory()) &#123;<br>            <span class="hljs-comment">// log.warn(&quot;用户定义包名 &quot; + packageName + &quot; 下没有任何文件&quot;);</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 如果存在 就获取包下的所有文件 包括目录</span><br>        File[] dirfiles = dir.listFiles(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileFilter</span>() &#123;<br>            <span class="hljs-comment">// 自定义过滤规则 如果可以循环(包含子目录) 或则是以.class结尾的文件(编译好的java类文件)</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(File file)</span> &#123;<br>                <span class="hljs-keyword">return</span> (recursive &amp;&amp; file.isDirectory()) || (file.getName().endsWith(<span class="hljs-string">&quot;.class&quot;</span>));<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 循环所有文件</span><br>        <span class="hljs-keyword">for</span> (File file : dirfiles) &#123;<br>            <span class="hljs-comment">// 如果是目录 则继续扫描</span><br>            <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>                findClassesInPackageByFile(packageName + <span class="hljs-string">&quot;.&quot;</span> + file.getName(), file.getAbsolutePath(), recursive, classes);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果是java类文件 去掉后面的.class 只留下类名</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> file.getName().substring(<span class="hljs-number">0</span>, file.getName().length() - <span class="hljs-number">6</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 添加到集合中去</span><br>                    classes.add(Thread.currentThread().getContextClassLoader().loadClass(packageName + <span class="hljs-string">&#x27;.&#x27;</span> + className));<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                    <span class="hljs-comment">// log.error(&quot;添加用户自定义视图类错误 找不到此类的.class文件&quot;);</span><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HashMap</title>
    <link href="/2022/08/21/hashmap/"/>
    <url>/2022/08/21/hashmap/</url>
    
    <content type="html"><![CDATA[<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>理想状态下，HashMap 查找的时间复杂度为 O(1)；</p><p>JKD 8 之后，HashMap 使用数组 + 链表 + 红黑树的结构；在此之前，使用数组 + 链表；</p><ul><li>数组：HashMap 是 key-value 的形式进行存储，key + value 以 Entry 对象的形式存入数组</li></ul><p>下标：通过 key 获取对应的 hash，再根据 hash 值与数组最大索引进行按位与运算（都转为二进制，依次对比，都为 1 返回 1，否则返回 0），得到的值就是下标</p><ul><li><p>链表：当数据量很大时，必然会出现下标冲突的问题（哈希碰撞），HashMap 是通过拉链法解决这个问题的</p></li><li><p>红黑树：链表查询速度太慢，当链表长度很长的时候，对应 HashMap 的取值操作会非常耗费时间，</p><p>当链表长度大于 8 时，链表自动转为红黑树，红黑树是一个平衡二叉树，可以提高查询效率</p></li></ul><p>排序二叉树：左子树结点的值都小于或等于根节点，右子树结点的值都大于或等于根节点，且左右两个子树都是一棵排序二叉树</p><p>平衡二叉树：本质是特殊的排序二叉树，满足：左右两个子树的高度差的绝对值不超过 1（平衡因子为 -1、0、1），且左右两个子树都是一棵平衡二叉树</p><p>红黑树：是一个平衡二叉树；满足：</p><ul><li>结点是红色或黑色</li><li>根结点是黑色</li><li>每个叶子结点都是黑色的</li><li>每个红色结点的两个子结点都是黑色（从每个叶子结点到根节点的所有路径上不能有两个连续的红色结点）</li><li>从任意结点到其每个叶子结点的所有路径都包含相同数目的黑色结点</li></ul><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><p>HashMap 的无参构造只做一件事，设置 loadFactor（负载因子）= 0.75，并没有创建数组，HashMap 的数组是按需创建的，只有在创建 HashMap 并且添加数据的情况下才会创建数组；创建数组的默认长度是 16：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_INITIAL_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>; <span class="hljs-comment">// 右移4位</span><br></code></pre></td></tr></table></figure><p>容量（capacity）：HashMap 中桶的数量，默认长度为 16</p><p>负载因子（loadFactor）：用来判断 HashMap 是否需要进行扩容，计算公式：loadFactor = 存入元素总和 / capacity，所以当存放的数据大于 12 时，就进行数组扩容；扩容方法：* 2，扩大一倍，桶的数量上限为 64</p><h3 id="添加数据-putVal"><a href="#添加数据-putVal" class="headerlink" title="添加数据 putVal"></a>添加数据 putVal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>首先通过 key 获取对应 hash</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">int</span> h;<br>    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>key 为 null 时，hash 值赋为 0，即自动将该条数据存入数组第一位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>)<br></code></pre></td></tr></table></figure><p>其中，&gt;&gt;&gt; 无符号右移，h &gt;&gt;&gt; 16 取出 h 的高 16位；则非空的 key，hash 值为其 hashCode 与自己的高 16 位进行按位异或运算；如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">0000 </span><span class="hljs-number">0100 </span><span class="hljs-number">1011 </span><span class="hljs-number">0011 </span><span class="hljs-number">1101 </span><span class="hljs-number">1111 </span><span class="hljs-number">1110 </span><span class="hljs-number">0001</span><br><span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-number">16</span> <span class="hljs-string">//高16位取出来，放到低位，高位补0</span><br><span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0000 </span><span class="hljs-number">0100 </span><span class="hljs-number">1011 </span><span class="hljs-number">0011</span><br><span class="hljs-string">异或运算：</span><br><span class="hljs-number">0000 </span><span class="hljs-number">0100 </span><span class="hljs-number">1011 </span><span class="hljs-number">0011 </span><span class="hljs-number">1101 </span><span class="hljs-number">1011 </span><span class="hljs-number">0101 </span><span class="hljs-number">0010</span><br></code></pre></td></tr></table></figure><p>（详解 028-2）取出自己的高 16 位，异或混合自己的低位，以此加大低位的随机性，降低冲突的可能性；这样可以在数组长度比较小的时候保证高低位都能参与运算，使散列更加均匀，减少碰撞几率；</p><p>拿到 key 的 hash 之后，再将 hash 与数组最大索引进行按位与运算，最终得到索引；如数组长度为 16 时：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">h</span> = hashCode()         <span class="hljs-number">1111</span> <span class="hljs-number">1111</span> <span class="hljs-number">1111</span> <span class="hljs-number">1111</span> <span class="hljs-number">1111</span> <span class="hljs-number">0000</span> <span class="hljs-number">1110</span> <span class="hljs-number">1010</span><br><span class="hljs-attribute">h</span> &gt;&gt;&gt; <span class="hljs-number">16</span>               <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">1111</span> <span class="hljs-number">1111</span> <span class="hljs-number">1111</span> <span class="hljs-number">1111</span><br><span class="hljs-attribute">hash</span> = h ^ h &gt;&gt;&gt; <span class="hljs-number">16</span>    <span class="hljs-number">1111</span> <span class="hljs-number">1111</span> <span class="hljs-number">1111</span> <span class="hljs-number">1111</span> <span class="hljs-number">0000</span> <span class="hljs-number">1111</span> <span class="hljs-number">0001</span> <span class="hljs-number">0101</span><br><span class="hljs-attribute">15</span>                     <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">1111</span><br><span class="hljs-attribute">15</span> &amp; hash              <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0101</span><br></code></pre></td></tr></table></figure><p>链表和红黑树转换时机：数组长度等于 64，且链表长度大于 8 时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>    treeifyBin(tab, hash);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (tab == <span class="hljs-literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)<br>    resize();<br></code></pre></td></tr></table></figure><p>注意第一个判断，binCount 是从 0 开始计数的，判断条件为：</p><p><code>binCount</code> &gt;= <code>TREEIFY_THRESHOLD - 1</code> =&gt; <code>binCount+1</code>(链表长度) &gt;= <code>TREEIFY_THRESHOLD</code></p><p>但此时链表新插入了一个节点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><p>所以链表树化的那一刻，它的真实长度应该是<code>binCount+1+1</code> =&gt; 链表长度 &gt; <code>TREEIFY_THRESHOLD</code></p><h3 id="添加数据完整步骤"><a href="#添加数据完整步骤" class="headerlink" title="添加数据完整步骤"></a>添加数据完整步骤</h3><ol><li>根据 key 计算 hash 值；</li><li>在 put 时判断数组是否存在，如果不存在，用 resize() 创建默认长度为 16 的数组；</li><li>确定存入的 Node 对象的索引，根据 hash 值与数组最大索引进行按位与运算得到下标；</li><li>判断该位置是否有元素，如果没有，直接创建一个 Node 存入；</li><li>如果有元素，判断 key 是否相同，如果相同，将原来的 Node 赋给一个变量并返回；</li><li>如果不相同，需要在原 Node 基础上添加新 Node；首先要判断该位置是链表还是红黑树；</li><li>如果是红黑树，将 Node 存入红黑树；</li><li>如果是链表，就遍历链表，找到最后一位，将 Node 存入；</li><li>将 Node 存入链表最后一位之后，需要判断此时链表的长度是否超过 8，如果链表长度超过 8，且此时数组容量等于 64，则将链表转为红黑树；如果数组容量小于 64，会进行数组扩容，而不是将链表转为红黑树；</li><li>判断数组是或否需要进行扩容。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>集合框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cron定时任务</title>
    <link href="/2022/08/14/cron%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <url>/2022/08/14/cron%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><blockquote><p>本例为 CentOS 7 系统</p></blockquote><h3 id="系统定时执行目录执行时间"><a href="#系统定时执行目录执行时间" class="headerlink" title="系统定时执行目录执行时间"></a>系统定时执行目录执行时间</h3><p>/etc/anacrontab</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">/etc/anacrontab: configuration file <span class="hljs-keyword">for</span> anacron</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">See anacron(8) and anacrontab(5) <span class="hljs-keyword">for</span> details.</span><br><br>SHELL=/bin/sh<br>PATH=/sbin:/bin:/usr/sbin:/usr/bin<br>MAILTO=root<br><span class="hljs-meta prompt_"># </span><span class="language-bash">the maximal random delay added to the base delay of the <span class="hljs-built_in">jobs</span></span><br>RANDOM_DELAY=45<br><span class="hljs-meta prompt_"># </span><span class="language-bash">the <span class="hljs-built_in">jobs</span> will be started during the following hours only</span><br>START_HOURS_RANGE=3-22<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">period <span class="hljs-keyword">in</span> days   delay <span class="hljs-keyword">in</span> minutes   job-identifier   <span class="hljs-built_in">command</span></span><br>1       5       cron.daily              nice run-parts /etc/cron.daily<br>7       25      cron.weekly             nice run-parts /etc/cron.weekly<br>@monthly 45     cron.monthly            nice run-parts /etc/cron.monthly<br></code></pre></td></tr></table></figure><p>在这个文件中，“RANDOM_DELAY” 定义的是最大随机延迟，也就是说，cron.daily 工作如果超过 1 天没有执行，则并不会马上执行，而是先延迟强制延迟时间，再延迟随机延迟时间，之后再执行命令；“START_HOURS_RANGE” 的是定义 anacron 执行时间范围，anacron 只会在这个时间范围内执行。delay in minutes 表示强制延迟。</p><p>对于 cron.hourly，进入 /etc/cron.d/0hourly 中查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Run the hourly <span class="hljs-built_in">jobs</span></span><br>SHELL=/bin/bash<br>PATH=/sbin:/bin:/usr/sbin:/usr/bin<br>MAILTO=root<br>01 * * * * root run-parts /etc/cron.hourly<br></code></pre></td></tr></table></figure><p>所以，首先 cron.hourly 里的脚本是每小时第 1 分钟执行；</p><p>crond 会检查 /etc/cron.d 里面的配置，里面有一个 0hourly 文件，每小时去运行一次 /etc/cron.hourly 目录，该目录下面有一个 0anacron 文件，这样 0anacron 文件就能每小时运行一次，这里其实执行的是 /usr/sbin/anacron -s 。anacron 读取配置文件 /etc/anacrontab，将当前时间与 /var/spool/anacron 目录下面的文件里面的时间戳作对比，如果需要则去运行 /etc/anacrontab 对应的条目。</p><p>参考：</p><p><a href="https://www.sidney-tan.com/linuxuse/474.html">https://www.sidney-tan.com/linuxuse/474.html</a></p><p><a href="https://www.wake-up-neo.net/zh/linux/%60crondaily%60%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E8%BF%90%E8%A1%8C%EF%BC%9F/958769610/">https://www.wake-up-neo.net/zh/linux/%60crondaily%60%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E8%BF%90%E8%A1%8C%EF%BC%9F/958769610/</a></p><p><a href="https://xz.aliyun.com/t/1079">https://xz.aliyun.com/t/1079</a></p><h3 id="脚本放在-etc-cron-daily-中不执行的原因"><a href="#脚本放在-etc-cron-daily-中不执行的原因" class="headerlink" title="脚本放在 /etc/cron.daily 中不执行的原因"></a>脚本放在 /etc/cron.daily 中不执行的原因</h3><p>脚本要有执行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod + x filename<br></code></pre></td></tr></table></figure><p>如：chmod 755 delete-log</p><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><blockquote><p>定时任务写完后，需要验证一下有没有达到你想要的效果</p></blockquote><p>编辑脚本文件放在指定目录，这里先放在 cron.daily、cron.hourly 等目录下，方便修改好直接适配需求。</p><p>可以先手动 run-parts 脚本所在目录，run-parts /etc/cron.daily，然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tail -f /var/log/cron<br></code></pre></td></tr></table></figure><p>查看日志中是否有对应脚本文件执行的记录。</p><p>有正常执行的记录，就可以测定时任务是否有效了，按道理来说有两种方法测试：</p><ol><li><p>编辑 cron 配置文件（作业列表），</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">crontab -e<br></code></pre></td></tr></table></figure><p>按自己需要的时间 <code>run-parts</code> 脚本所在目录，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">每天14点47分执行cron.daily内的脚本</span><br>47 14 * * * root run-parts /etc/cron.daily<br></code></pre></td></tr></table></figure><p>更多可参考：<a href="https://www.jianshu.com/p/838db0269fd0">https://www.jianshu.com/p/838db0269fd0</a></p></li><li><p>修改控制目录下脚本执行时间的文件 /etc/anacrontab：</p><p>修改 START_HOURS_RANGE，delay in minutes 和 RANDOM_DELAY 为自己需要的时间，进行测试。</p><p>但不推荐改动系统设置。</p></li></ol><h3 id="grep-命令多条件查询"><a href="#grep-命令多条件查询" class="headerlink" title="grep 命令多条件查询"></a>grep 命令多条件查询</h3><p><a href="https://www.codeleading.com/article/97822101577/">https://www.codeleading.com/article/97822101577/</a></p><h3 id="特殊处理"><a href="#特殊处理" class="headerlink" title="特殊处理"></a>特殊处理</h3><p>自定义定时执行任务时，排查完各种问题，如文件执行权限，命令书写，执行时间检查等，<code>crontab -e</code> 中写的定时任务依然不生效，可在 /etc/crontab 中测试定时任务。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>定时任务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2022/08/07/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/08/07/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式：一个类只能有一个实例化对象，多个线程共享该实例对象的资源；要求：</p><ol><li><p>外部不能随意调用构造函数创建对象；</p><p>私有化构造器</p></li><li><p>内部对外提供一个可调用的 public 函数，通过该函数获取单例对象；</p><p>这个方法要定义为 static，因为构造函数为私有，外部不能通过创建实例对象来调用该方法，只能定义为静态，通过类调用</p></li></ol><p>最基本思想，单线程下实现单例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonDemo</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SingletonDemo</span> <span class="hljs-variable">singletonDemo</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonDemo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;创建了SingletonDemo对象&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonDemo <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (singletonDemo == <span class="hljs-literal">null</span>) &#123;<br>            singletonDemo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonDemo</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> singletonDemo;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>多线程下，对 public 方法加锁，使同一时间只有一个线程能访问该资源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> SingletonDemo <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (singletonDemo == <span class="hljs-literal">null</span>) &#123;<br>        singletonDemo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonDemo</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> singletonDemo;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以锁定其他共享资源，如代码块、类等；更推荐锁代码块，因为影响同步的代码可能不是整个方法，更细粒度的锁灵活性较高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonDemo <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (SingletonDemo.class) &#123;<br>        <span class="hljs-keyword">if</span> (singletonDemo == <span class="hljs-literal">null</span>) &#123;<br>            singletonDemo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonDemo</span>();<br>        &#125;   <br>    &#125;<br>    <span class="hljs-keyword">return</span> singletonDemo;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：应先锁，再判空；先判空，会有多个线程进入创建对象的代码块等待资源。</p><p>更加安全，使用 double check，双重校验锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonDemo <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (singletonDemo == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">synchronized</span> (SingletonDemo.class) &#123;<br>            <span class="hljs-keyword">if</span> (singletonDemo == <span class="hljs-literal">null</span>) &#123;<br>                singletonDemo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonDemo</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> singletonDemo;<br>&#125;<br></code></pre></td></tr></table></figure><p>绝对安全，定义对象时加上 volatile 关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonDemo</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SingletonDemo</span> <span class="hljs-variable">singletonDemo</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonDemo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;创建了SingletonDemo对象&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonDemo <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (singletonDemo == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (SingletonDemo.class) &#123;<br>                <span class="hljs-keyword">if</span> (singletonDemo == <span class="hljs-literal">null</span>) &#123;<br>                    singletonDemo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonDemo</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singletonDemo;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>volatile 的作用：使内存中的数据对线程可见</p><blockquote><p>一个线程在访问内存数据时，拿到的不是数据本身，而是将主内存中的东西复制保存在工作内存，相当于对内存中数据的副本进行操作，操作完成后再将数据保存到主内存；即主内存对线程是不可见的</p></blockquote><img src="/2022/08/07/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/JMM.png" class="" title="图片引用方法一"> ]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象</title>
    <link href="/2022/08/07/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/08/07/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1. 面向对象"></a>1. 面向对象</h2><ul><li>面向过程：自上向下，将一个大问题分解为几个小问题，再将小问题分解为更小的问题，最后将任务划分成一个一个具体的步骤，分别去执行，最小粒度细化到方法层面</li><li>面向对象：将程序所有参与角色都看作一个个对象，通过对象和对象之间的相互调用来完成系统的功能，是一种将程序模块化的思想</li></ul><h3 id="1-1-类和对象"><a href="#1-1-类和对象" class="headerlink" title="1.1 类和对象"></a>1.1 类和对象</h3><p>对象是主体，类是用来创建对象的；类是产生对象的模板，所有的对象都是通过类来创建的</p><p>对象的特征：</p><ul><li>属性，对象的静态特征</li><li>方法，对象的动态特征</li></ul><p>类是对象的抽象化描述，对象是类的具体实例</p><p>对象的创建：new、调用类的构造方法：</p><ul><li>类默认有一个无参构造，手动创建一个有参构造后，该默认构造就会被覆盖</li><li>使用有参构造创建对象，只需调用一次方法，就可以同时完成创建和赋值；使用无参需要创建、赋值两步操作</li></ul><h3 id="1-2-成员变量和局部变量"><a href="#1-2-成员变量和局部变量" class="headerlink" title="1.2 成员变量和局部变量"></a>1.2 成员变量和局部变量</h3><p>作用域：就近原则；成员变量和局部变量重名时，采用就近原则进行优先级取值；</p><p>成员变量有默认值，局部变量没有：</p><ul><li><p>byte、short、int、long、float、double：0</p></li><li><p>char：’’</p></li><li><p>boolean：false</p></li><li><p>引用类型：null</p></li></ul><h3 id="1-3-三大特征"><a href="#1-3-三大特征" class="headerlink" title="1.3 三大特征"></a>1.3 三大特征</h3><p>封装、继承、多态</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>将类的各种信息（属性/成员变量和方法）封装到内部，使得外部无法直接访问，提高数据安全性。</p><ul><li><p>属性私有化</p></li><li><p>提供公有方法访问私有属性（set/get），在方法中添加逻辑，控制数据的安全性</p></li><li><p>外部通过 set/get 方法访问属性</p></li></ul><p><strong>static</strong></p><p>static 表示静态或全局，可用来修饰成员变量、成员方法、代码块，被修饰的资源属于整个类，所有对象都可以共享这些资源；</p><p>使用 static 修饰后，方法就会独立于该类的任何一个实例对象，不属于任何对象，而是属于类，访问时不需要依赖于任何一个对象，可以直接通过类来访问。</p><p>static 修饰的方法（静态方法）不能使用 this 关键字；this 表示当前对象，静态资源属于类，不属于任何对象；同时静态方法也不能访问类的实例变量和实例方法（非 static 修饰的）</p><p>static 修饰代码块，静态代码块的特点是只执行一次，当类被加载到内存时执行，不需要手动调用，会自动执行；且也只能访问静态资源；创建对象时，静态代码块的执行先于构造函数的执行，即类加载 –&gt; 创建对象</p><p><strong>this</strong></p><p>永远指向构造或调用的当前实例；</p><p>可用于在构造器里访问另一个构造器，此时只能放在第一行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;bens&quot;</span>, <span class="hljs-string">&quot;black&quot;</span>); <span class="hljs-comment">// 但 this 作为构造器只能放在第一行</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String type, String color)</span> &#123;<br>    <span class="hljs-built_in">this</span>.type = type;<br>    <span class="hljs-built_in">this</span>.color = color;<br>&#125;<br></code></pre></td></tr></table></figure><p>this() 调用本类构造函数；注意构造函数不能进行递归，会导致无限创建对象，堆内存溢出</p><p><strong>super</strong></p><p>super() 调用父类构造函数</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>类之间资源共享的一种方式，一个类中的信息（成员变量、成员方法）可以直接被另外的类拥有。</p><p>子类能继承父类的非私有资源（非 private 修饰的资源）</p><ul><li>创建子类对象之前，会自动创建父类对象</li><li>无参创建子类对象，默认调用父类的无参构造创建父类对象</li><li>有参创建子类对象，也默认调用父类的无参构造创建父类对象</li></ul><p>父类也叫超类，子类也叫派生类；创建子类时通过有参构造创建父类对象（super）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    <br>    <span class="hljs-built_in">super</span>(); <span class="hljs-comment">// 可省略，默认调用父类无参构造</span><br>    System.out.println(<span class="hljs-string">&quot;无参构造创建Student对象&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>    <span class="hljs-built_in">super</span>(<span class="hljs-number">1</span>);<br>    System.out.println(<span class="hljs-string">&quot;有参构造创建Student对象&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>一种事务可以有多种不同的表现形态，一个对象在不同的业务场景中以不同的形式出现，根据不同的业务场景，对象呈现出不同形式。</p><ul><li>必须有继承关系，只有构建继承关系，才能使一个对象可以进行不同形式形式的变形</li><li>父类引用指向子类实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.oop;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Member</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.oop;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrdinaryMember</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Member</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;普通会员买书打9折&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.oop;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperMember</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Member</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;超级会员买书打6折&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kk.oop;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VIPMember</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Member</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;VIP会员买书打3折&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">OrdinaryMember</span> <span class="hljs-variable">ordinaryMember</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrdinaryMember</span>();<br>    <span class="hljs-type">SuperMember</span> <span class="hljs-variable">superMember</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperMember</span>();<br>    <span class="hljs-type">VIPMember</span> <span class="hljs-variable">vipMember</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VIPMember</span>();<br><br>    <span class="hljs-type">Cashier</span> <span class="hljs-variable">cashier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cashier</span>();<br><br>    cashier.setMember(ordinaryMember);<br>    cashier.settlement();<br>    cashier.setMember(superMember);<br>    cashier.settlement();<br>    cashier.setMember(vipMember);<br>    cashier.settlement();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-方法重载和重写"><a href="#1-4-方法重载和重写" class="headerlink" title="1.4 方法重载和重写"></a>1.4 方法重载和重写</h3><ul><li>重载：在<strong>同一个类中</strong>，两个方法的<strong>方法名相同</strong>，<strong>参数列表不同（数据类型、形参个数）</strong>，<strong>与返回值无关</strong></li><li>重写：子类在继承父类方法的基础上，对父类方法进行重新定义，覆盖父类方法的操作叫做重写；规则：<ul><li>方法名相同</li><li>参数列表相同</li><li><strong>子类方法的返回值与父类方法的返回值类型相同或者是其子类</strong>（返回值：父类 &gt; 子类）</li><li><strong>子类方法的访问权限不能小于父类</strong>（访问权限：子类 &gt; 父类）但能被子类重写的方法一定是非 private 的</li></ul></li></ul><p><strong>权限修饰符</strong></p><table><thead><tr><th>修饰符</th><th>当前类</th><th>同 package</th><th>子孙类</th><th>其他 package</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>friendly</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h3 id="1-5-抽象类和抽象方法"><a href="#1-5-抽象类和抽象方法" class="headerlink" title="1.5 抽象类和抽象方法"></a>1.5 抽象类和抽象方法</h3><p>抽象方法：只把方法定义出来，但不做实现</p><p>抽象类：一个类中一旦出现一个抽象方法，则该类必须定义为抽象类；抽象类中那个可以没有抽象方法，也可以有普通方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Member</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-面向对象高级部分"><a href="#2-面向对象高级部分" class="headerlink" title="2. 面向对象高级部分"></a>2. 面向对象高级部分</h2><h3 id="2-1-Object-类"><a href="#2-1-Object-类" class="headerlink" title="2.1 Object 类"></a>2.1 Object 类</h3><p>Object 是所有 Java 类的共同父类</p><p>Java 所有对象有一些共性，如：hashCode() 获取地址，getClass() 获取类信息，……</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>toString()</td><td>以字符串的形式返回对象的信息</td></tr><tr><td>equals(Object obj)</td><td>判断两个对象是否相等</td></tr><tr><td>hashCode()</td><td>返回对象的内存地址</td></tr></tbody></table><h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><p>Object 类中的 equals 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span> == obj);<br>&#125;<br></code></pre></td></tr></table></figure><p>String 类对 equals 方法的重写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object anObject)</span> &#123;<br>    <span class="hljs-comment">// 判断是否为同一对象</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == anObject) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// 判断数据类型是否一致</span><br>    <span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">anotherString</span> <span class="hljs-operator">=</span> (String)anObject;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> value.length;<br>        <span class="hljs-comment">// 判断长度是否一致</span><br>        <span class="hljs-keyword">if</span> (n == anotherString.value.length) &#123;<br>            <span class="hljs-comment">// 判断每一位字符是否一致</span><br>            <span class="hljs-type">char</span> v1[] = value;<br>            <span class="hljs-type">char</span> v2[] = anotherString.value;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (v1[i] != v2[i])<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义类重写的 equals 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-comment">// 判断是否是同一对象</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// 判断对象对象是否为空、对象类型是否相同</span><br>    <span class="hljs-comment">// 判断是否为空，因为不能使用值为null的引用类型变量调用非静态方法</span><br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">People</span> <span class="hljs-variable">people</span> <span class="hljs-operator">=</span> (People) o;<br>    <span class="hljs-keyword">return</span> id == people.id &amp;&amp; Objects.equals(name, people.name);<br>&#125;<br></code></pre></td></tr></table></figure><p>注：<strong>基本数据类型的值直接在栈中存放，所以用 “==” 比较；引用数据类型在栈中存放的是对象在堆中的地址，不能用 “==” 比较，应用 <code>equals()</code> 比较值</strong></p><p>hashCode 和 equals 的关联：</p><p>都是用来判断两个对象是否相等；hashCode 的效率更高；</p><ul><li><p>hashCode 的值不相等，则两个对象一定不是同一个对象；</p></li><li><p>hashCode 的值相等，两个对象不一定是同一个对象，不能确实对象的关系；</p></li></ul><p>需要考虑效率的场景下，需要两者配合判断对象是否相等以提高效率，如：</p><p>集合框架底层实现，允许/不允许存储重复数据。</p><p>**重写 <code>equals()</code> 时必须重写 <code>hashCode()</code>**：</p><p>因为两个相等的对象的 <code>hashCode</code> 值必须是相等。也就是说如果 <code>equals</code> 方法判断两个对象是相等的，那这两个对象的 <code>hashCode</code> 值也要相等；</p><p>如果重写 <code>equals()</code> 时没有重写 <code>hashCode()</code> 方法的话就可能会导致 <code>equals</code> 方法判断是相等的两个对象，<code>hashCode</code> 值却不相等。、</p><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>可作为一个数组进行操作，传入任意数量对应类型形参。只能出现一个，且只能放在最后。</p><h3 id="2-2-包装类"><a href="#2-2-包装类" class="headerlink" title="2.2 包装类"></a>2.2 包装类</h3><p>包装类是 Java 提供的一组类，专门用来创建 8 种基本数据类型对应的对象：</p><p>Byte、Short、Integer、Long、Float、Double、Character、Boolean</p><img src="/2022/08/07/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%8C%85%E8%A3%85%E7%B1%BB.jpg" class="" title="图片引用方法一"> <h4 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h4><ul><li><p>装箱：将基本类型用它们对应的引用类型包装起来</p><p>构造方法、<code>valueOf()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i); <span class="hljs-comment">// 遵循类型自动转换规则（小-&gt;大）</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-string">&quot;3&quot;</span>); <span class="hljs-comment">// 除Character外，都有转字符串的构造方法</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> Integer.valueOf(i); <span class="hljs-comment">// 第二种装箱方法</span><br>...<br></code></pre></td></tr></table></figure></li><li><p>拆箱：将包装类型转换为基本数据类型</p><p><code>*Value()</code>、<code>parse*</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">num4</span> <span class="hljs-operator">=</span> num.intValue(); <span class="hljs-comment">// 拆箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num5</span> <span class="hljs-operator">=</span> Integer.parseInt(<span class="hljs-string">&quot;3&quot;</span>); <span class="hljs-comment">// 字符串还原为基本数据类型，Character没有</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3-接口"><a href="#2-3-接口" class="headerlink" title="2.3 接口"></a>2.3 接口</h3><p>面向接口编程：将程序的业务逻辑进行分离，以接口的形式去对接不同的业务模块，接口只串联不实现，真正的业务逻辑实现交给接口的实现类来完成。</p><p>好处：当用户需求发生变更时，只需要切换不同的实现类，而不需要修改串联模块的接口，减少对系统的影响；</p><p>使用这种方式编程，代码的耦合度低，灵活性高且易于扩展。</p><p>接口和抽象类的关系：</p><p>接口是一个极度抽象的抽象类，接口中的方法全部都是抽象方法；抽象类中可以有非抽象方法。</p><p>接口的实现类用来实现接口中的抽象方法，将抽象的概念具体化；实现类实现接口，需要对接口内部所有抽象方法进行实现，同时要求访问权限修饰符、返回类型、方法名和参数列表完全相同。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>readme</title>
    <link href="/2022/08/07/readme/"/>
    <url>/2022/08/07/readme/</url>
    
    <content type="html"><![CDATA[<h2 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h2><p class="note note-primary">简要说明</p><p>博客于 <strong>2022.08.07</strong> 开始更新</p><p>博主为同年入职的应届本科生，岗位是 Java 后台开发，网络安全行业，同时负责安全平台运维</p><p>主要内容是<span class="label label-danger">个人学习笔记</span>，工作中<span class="label label-danger">工作中解决问题的方法</span>分享</p><p>文章内容会包括 Java 知识，Linux 知识，shell 脚本，分布式架构常用技术以及中间件技术等</p><p>文章内容分<span class="label label-danger">个人文章</span>和<span class="label label-danger">分享文章</span>，分类、标签为<strong>个人</strong>等相关，可选择性观看；分享文章主要是知识干货，推荐观看</p><p>内容会尽量保持高质量，提供评论功能，欢迎大家积极批评指正。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/07/hello-world/"/>
    <url>/2022/08/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
